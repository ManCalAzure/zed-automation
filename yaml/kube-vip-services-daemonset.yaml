# 25-kube-vip-services-daemonset.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-vip
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-vip-role
rules:
  - apiGroups: [""]
    resources: ["services", "endpoints", "nodes", "pods", "configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch", "update"]
  - apiGroups: [""]
    resources: ["services/status"]
    verbs: ["patch", "update"]   # harmless if not used
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-vip-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-vip-role
subjects:
  - kind: ServiceAccount
    name: kube-vip
    namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-vip
  namespace: kube-system
  labels: { app.kubernetes.io/name: kube-vip }
spec:
  selector:
    matchLabels: { app.kubernetes.io/name: kube-vip }
  template:
    metadata:
      labels: { app.kubernetes.io/name: kube-vip }
    spec:
      hostNetwork: true
      serviceAccountName: kube-vip
      tolerations:
        - { key: node-role.kubernetes.io/control-plane, effect: NoSchedule }
        - { key: node-role.kubernetes.io/master, effect: NoSchedule }
      containers:
        - name: kube-vip
          image: docker.io/kubevip/kube-vip:latest
          args: ["manager", "--services", "--arp", "--leaderElection"]
          securityContext:
            capabilities: { add: ["NET_ADMIN","NET_RAW"] }
          env:
            Optional: set the NIC to advertise on if nodes have multiple uplinks
             - name: vip_interface
               value: "eth0"
             Optional: quiet logs
             - name: vip_loglevel
               value: "5"
